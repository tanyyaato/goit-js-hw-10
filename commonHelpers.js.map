{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["'use strict';\n// calendar library\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n// alert library\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n//\nconst inputEl = document.getElementById('datetime-picker');\nconst button = document.querySelector('button');\nbutton.setAttribute('disabled', '');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet intervalId = null;\n// const svgIconClose = `<svg width = \"24px\" height = \"24px\" class=\"icon icon-Group\"><use xlink:href=\"#icon-Group\"></use></svg>`;\n\nflatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: null,\n  minuteIncrement: 1,\n\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    if (selectedDates[0].getTime() > Date.now()) {\n      userSelectedDate = selectedDates[0].getTime();\n      toggleAttribute(button, false);\n    } else {\n      toggleAttribute(button, true);\n      iziToast.show({\n        title: '',\n        color: 'red',\n        position: 'topRight',\n        timeout: 5000,\n        close: false,\n        closeOnClick: true,\n        message: 'Please choose a date in the future',\n        iconUrl: '../img/sprite.svg#close-btn',\n        iconColor: '#FAFAFB',\n      });\n    }\n  },\n});\n\nbutton.addEventListener('click', () => {\n  if (userSelectedDate) {\n    toggleAttribute(button, true);\n    toggleAttribute(inputEl, true);\n  }\n  intervalId = setInterval(timer, 1000);\n});\n//\nfunction timer(intervalId) {\n  const currentTime = Date.now();\n  const difference = userSelectedDate - currentTime;\n  const { days, hours, minutes, seconds } = convertMs(difference);\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEl.textContent = addLeadingZero(seconds);\n  if (difference <= 0) {\n    clearInterval(intervalId);\n    timerEnd();\n    toggleAttribute(inputEl, false);\n    toggleAttribute(button, true);\n    // flatpickr('#datetime-picker', {\n    //   onClose(selectedDates) {\n    //     toggleAttribute(button, true);\n    //   },\n    // });\n    return;\n  }\n}\nfunction timerEnd() {\n  daysEl.textContent = '00';\n  hoursEl.textContent = '00';\n  minutesEl.textContent = '00';\n  secondsEl.textContent = '00';\n}\nfunction toggleAttribute(element, status) {\n  if (status) {\n    element.setAttribute('disabled', '');\n  } else {\n    element.removeAttribute('disabled');\n  }\n}\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n//  my code is up\n// Глобальная переменная для выбранной даты\n// let userSelectedDate = null;\n// let intervalId = null;\n\n// const inputEl = document.getElementById('datetime-picker');\n// const button = document.querySelector('button');\n// button.setAttribute('disabled', '');\n// const daysEl = document.querySelector('[data-days]');\n// const hoursEl = document.querySelector('[data-hours]');\n// const minutesEl = document.querySelector('[data-minutes]');\n// const secondsEl = document.querySelector('[data-seconds]');\n\n// // Инициализация плагина Flatpickr\n// flatpickr('#datetime-picker', {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n\n//   onClose(selectedDates) {\n//     if (selectedDates[0].getTime() > Date.now()) {\n//       userSelectedDate = selectedDates[0].getTime();\n//       button.removeAttribute('disabled');\n//     } else {\n//       button.setAttribute('disabled', '');\n//       alert('Пожалуйста, выберите дату в будущем');\n//     }\n//   },\n// });\n\n// // Обработчик клика по кнопке\n// button.addEventListener('click', () => {\n//   if (userSelectedDate) {\n//     button.setAttribute('disabled', '');\n//     inputEl.setAttribute('disabled', '');\n\n//     if (intervalId) {\n//       clearInterval(intervalId);\n//     }\n\n//     intervalId = setInterval(updateTimer, 1000);\n//   }\n// });\n\n// // Функция для обновления таймера\n// function updateTimer() {\n//   const now = Date.now();\n//   const ms = userSelectedDate - now;\n\n//   if (ms <= 0) {\n//     clearInterval(intervalId);\n//     daysEl.textContent = '00';\n//     hoursEl.textContent = '00';\n//     minutesEl.textContent = '00';\n//     secondsEl.textContent = '00';\n//     return;\n//   }\n\n//   const { days, hours, minutes, seconds } = convertMs(ms);\n//   daysEl.textContent = addLeadingZero(days);\n//   hoursEl.textContent = addLeadingZero(hours);\n//   minutesEl.textContent = addLeadingZero(minutes);\n//   secondsEl.textContent = addLeadingZero(seconds);\n// }\n\n// // Функция для преобразования миллисекунд в дни, часы, минуты и секунды\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// // Функция для добавления ведущего нуля\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n"],"names":["inputEl","button","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","flatpickr","selectedDates","toggleAttribute","iziToast","timer","intervalId","currentTime","difference","days","hours","minutes","seconds","convertMs","addLeadingZero","timerEnd","element","status","ms","value"],"mappings":"2GASA,MAAMA,EAAU,SAAS,eAAe,iBAAiB,EACnDC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,aAAa,WAAY,EAAE,EAClC,MAAMC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KAIvBC,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,KACb,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,OACpCF,EAAmBE,EAAc,CAAC,EAAE,QAAO,EAC3CC,EAAgBR,EAAQ,EAAK,IAE7BQ,EAAgBR,EAAQ,EAAI,EAC5BS,EAAS,KAAK,CACZ,MAAO,GACP,MAAO,MACP,SAAU,WACV,QAAS,IACT,MAAO,GACP,aAAc,GACd,QAAS,qCACT,QAAS,8BACT,UAAW,SACnB,CAAO,EAEJ,CACH,CAAC,EAEDT,EAAO,iBAAiB,QAAS,IAAM,CACjCK,IACFG,EAAgBR,EAAQ,EAAI,EAC5BQ,EAAgBT,EAAS,EAAI,GAElB,YAAYW,EAAO,GAAI,CACtC,CAAC,EAED,SAASA,EAAMC,EAAY,CACzB,MAAMC,EAAc,KAAK,MACnBC,EAAaR,EAAmBO,EAChC,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAU,EAK9D,GAJAZ,EAAO,YAAckB,EAAeL,CAAI,EACxCZ,EAAQ,YAAciB,EAAeJ,CAAK,EAC1CZ,EAAU,YAAcgB,EAAeH,CAAO,EAC9CZ,EAAU,YAAce,EAAeF,CAAO,EAC1CJ,GAAc,EAAG,CACnB,cAAcF,CAAU,EACxBS,IACAZ,EAAgBT,EAAS,EAAK,EAC9BS,EAAgBR,EAAQ,EAAI,EAM5B,MACD,CACH,CACA,SAASoB,GAAW,CAClBnB,EAAO,YAAc,KACrBC,EAAQ,YAAc,KACtBC,EAAU,YAAc,KACxBC,EAAU,YAAc,IAC1B,CACA,SAASI,EAAgBa,EAASC,EAAQ,CACpCA,EACFD,EAAQ,aAAa,WAAY,EAAE,EAEnCA,EAAQ,gBAAgB,UAAU,CAEtC,CACA,SAASH,EAAUK,EAAI,CAQrB,MAAMT,EAAO,KAAK,MAAMS,EAAK,KAAG,EAE1BR,EAAQ,KAAK,MAAOQ,EAAK,MAAO,IAAI,EAEpCP,EAAU,KAAK,MAAQO,EAAK,MAAO,KAAQ,GAAM,EAEjDN,EAAU,KAAK,MAASM,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeK,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}